//===-- Y86Subtarget.h - Define Subtarget for the Y86 ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Y86 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_Y86_Y86SUBTARGET_H
#define LLVM_LIB_TARGET_Y86_Y86SUBTARGET_H
 
#include "Y86FrameLowering.h"
#include "Y86ISelLowering.h"
#include "Y86InstrInfo.h"

#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "Y86GenSubtargetInfo.inc"

namespace llvm {
class StringRef;
class Y86TargetMachine;

namespace PICStyles {

enum class Style {
  StubPIC, // Used on i386-darwin in pic mode.
  GOT,     // Used on 32 bit elf on when in pic mode.
  RIPRel,  // Used on X86-64 when in pic mode.
  None     // Set when not in pic mode.
};

} // end namespace PICStyles

class Y86Subtarget final : public Y86GenSubtargetInfo {
  virtual void anchor();

private:
  /// Override the stack alignment.
  MaybeAlign StackAlignOverride;
  // In 64BitMode, we ignore Segment Reg
  bool In64BitMode = true;
    /// Which PIC style to use
  PICStyles::Style PICStyle;

protected:
  InstrItineraryData InstrItins;

  const Y86TargetMachine &TM;

  Triple TargetTriple;

  Y86InstrInfo InstrInfo;
  Y86FrameLowering FrameLowering;
  Y86TargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  ///

  bool is64Bit() const {
    return In64BitMode;
  }

  Y86Subtarget(const Triple &TT, StringRef CPU, StringRef TuneCPU, StringRef FS,
               const Y86TargetMachine &TM);

  unsigned getStackAlignment() const { return 4; }

  PICStyles::Style getPICStyle() const { return PICStyle; }

  void setPICStyle(PICStyles::Style Style) { PICStyle = Style; }

  Y86Subtarget &initializeSubtargetDependencies(StringRef CPU,
                                                StringRef TuneCPU,
                                                StringRef FS);
                                                
  //void initSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);
  
  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const Y86InstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const Y86FrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const Y86RegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const Y86TargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
};
} // namespace llvm

#endif
